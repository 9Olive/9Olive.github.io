}
avocados %>%
filter(region %in% rgns) %>%
ggplot() +
geom_line(aes(x = Date, y = `Total Volume`,
color = type, linetype = region),
size = 1.5, alpha = .7) +
scale_y_continuous(labels = scales::number_format(accuracy = 1e3, suffix = 'K'),                                breaks = scales::pretty_breaks(n = 7)) +
scale_x_date(breaks = scales::pretty_breaks(n = 25)) +
labs(title = plt_title,
x = "", y = "Average Price") +
theme(axis.text.x = element_text(angle = 290, hjust = 0, vjust = 0, size = 18),
text = element_text(size = 24)) -> gg
return(gg)
}
plottr2(2017, 'top') / plottr2(2017, 'bottom') / plottr2(2017, 'random')
plottr2 <- function(year, sel_type = c('top', 'bottom', 'random')) {
avocados %>%
filter(year == year) %>%
group_by(region) %>%
summarise(MeanVolume = mean(`Total Volume`)) %>%
ungroup() -> cado
rgns_hi <- cado %>% top_n( 2, MeanVolume) %>% pull(region)
rgns_lo <- cado %>% top_n(-2, MeanVolume) %>% pull(region)
if (sel_type == 'top'){
rgns <- rgns_hi
plt_title <- 'Largest Weekly Output of Avocados'
} else if (sel_type =='bottom') {
rgns <- rgns_lo
plt_title <- 'Smallest Weekly Output of Avocados'
} else {
rgns <- cado %>% filter(!region %in% c(rgns_hi, rgns_lo)) %>%
pull(region) %>% unique() %>% sample(2)
plt_title <- 'Randomly Selected Regions'
}
avocados %>%
filter(region %in% rgns) %>%
ggplot() +
geom_line(aes(x = Date, y = `Total Volume`,
color = type, linetype = region),
size = 1.5, alpha = .7) +
scale_y_continuous(labels = scales::number_format(scale = 1e3, suffix = 'K'),                                breaks = scales::pretty_breaks(n = 7)) +
scale_x_date(breaks = scales::pretty_breaks(n = 25)) +
labs(title = plt_title,
x = "", y = "Average Price") +
theme(axis.text.x = element_text(angle = 290, hjust = 0, vjust = 0, size = 18),
text = element_text(size = 24)) -> gg
return(gg)
}
plottr2(2017, 'top') / plottr2(2017, 'bottom') / plottr2(2017, 'random')
plottr2 <- function(year, sel_type = c('top', 'bottom', 'random')) {
avocados %>%
filter(year == year) %>%
group_by(region) %>%
summarise(MeanVolume = mean(`Total Volume`)) %>%
ungroup() -> cado
rgns_hi <- cado %>% top_n( 2, MeanVolume) %>% pull(region)
rgns_lo <- cado %>% top_n(-2, MeanVolume) %>% pull(region)
if (sel_type == 'top'){
rgns <- rgns_hi
plt_title <- 'Largest Weekly Output of Avocados'
} else if (sel_type =='bottom') {
rgns <- rgns_lo
plt_title <- 'Smallest Weekly Output of Avocados'
} else {
rgns <- cado %>% filter(!region %in% c(rgns_hi, rgns_lo)) %>%
pull(region) %>% unique() %>% sample(2)
plt_title <- 'Randomly Selected Regions'
}
avocados %>%
filter(region %in% rgns) %>%
ggplot() +
geom_line(aes(x = Date, y = `Total Volume`,
color = type, linetype = region),
size = 1.5, alpha = .7) +
scale_y_continuous(labels = scales::number_format(accuracy = 1e6, suffix = 'M'),                                breaks = scales::pretty_breaks(n = 7)) +
scale_x_date(breaks = scales::pretty_breaks(n = 25)) +
labs(title = plt_title,
x = "", y = "Average Price") +
theme(axis.text.x = element_text(angle = 290, hjust = 0, vjust = 0, size = 18),
text = element_text(size = 24)) -> gg
return(gg)
}
plottr2(2017, 'top') / plottr2(2017, 'bottom') / plottr2(2017, 'random')
plottr2 <- function(year, sel_type = c('top', 'bottom', 'random')) {
avocados %>%
filter(year == year) %>%
group_by(region) %>%
summarise(MeanVolume = mean(`Total Volume`)) %>%
ungroup() -> cado
rgns_hi <- cado %>% top_n( 2, MeanVolume) %>% pull(region)
rgns_lo <- cado %>% top_n(-2, MeanVolume) %>% pull(region)
if (sel_type == 'top'){
rgns <- rgns_hi
plt_title <- 'Largest Weekly Output of Avocados'
} else if (sel_type =='bottom') {
rgns <- rgns_lo
plt_title <- 'Smallest Weekly Output of Avocados'
} else {
rgns <- cado %>% filter(!region %in% c(rgns_hi, rgns_lo)) %>%
pull(region) %>% unique() %>% sample(2)
plt_title <- 'Randomly Selected Regions'
}
avocados %>%
filter(region %in% rgns) %>%
ggplot() +
geom_line(aes(x = Date, y = `Total Volume`,
color = type, linetype = region),
size = 1.5, alpha = .7) +
scale_y_continuous(labels = scales::number_format(big.mark = ','),                                breaks = scales::pretty_breaks(n = 7)) +
scale_x_date(breaks = scales::pretty_breaks(n = 25)) +
labs(title = plt_title,
x = "", y = "Average Price") +
theme(axis.text.x = element_text(angle = 290, hjust = 0, vjust = 0, size = 18),
text = element_text(size = 24)) -> gg
return(gg)
}
plottr2(2017, 'top') / plottr2(2017, 'bottom') / plottr2(2017, 'random')
plottr2 <- function(year, sel_type = c('top', 'bottom', 'random')) {
avocados %>%
filter(year == year) %>%
group_by(region) %>%
summarise(MeanVolume = mean(`Total Volume`)) %>%
ungroup() -> cado
rgns_hi <- cado %>% top_n( 2, MeanVolume) %>% pull(region)
rgns_lo <- cado %>% top_n(-2, MeanVolume) %>% pull(region)
if (sel_type == 'top'){
rgns <- rgns_hi
plt_title <- 'Largest Weekly Output of Avocados'
} else if (sel_type =='bottom') {
rgns <- rgns_lo
plt_title <- 'Smallest Weekly Output of Avocados'
} else {
rgns <- cado %>% filter(!region %in% c(rgns_hi, rgns_lo)) %>%
pull(region) %>% unique() %>% sample(2)
plt_title <- 'Randomly Selected Regions'
}
avocados %>%
filter(region %in% rgns) %>%
ggplot() +
geom_line(aes(x = Date, y = `Total Volume`,
color = type, linetype = region),
size = 1.5, alpha = .7) +
scale_y_continuous(labels = scales::number_format(big.mark = ','),                                breaks = scales::pretty_breaks(n = 7)) +
scale_x_date(breaks = scales::pretty_breaks(n = 25)) +
labs(title = plt_title,
x = "", y = "Average Price") +
theme(axis.text.x = element_text(angle = 290, hjust = 0, vjust = 0, size = 18),
text = element_text(size = 24)) +
facet_grid(type~.)-> gg
return(gg)
}
plottr2(2017, 'top') / plottr2(2017, 'bottom') / plottr2(2017, 'random')
plottr2 <- function(year, sel_type = c('top', 'bottom', 'random')) {
avocados %>%
filter(year == year) %>%
group_by(region) %>%
summarise(MeanVolume = mean(`Total Volume`)) %>%
ungroup() -> cado
rgns_hi <- cado %>% top_n( 2, MeanVolume) %>% pull(region)
rgns_lo <- cado %>% top_n(-2, MeanVolume) %>% pull(region)
if (sel_type == 'top'){
rgns <- rgns_hi
plt_title <- 'Largest Weekly Output of Avocados'
} else if (sel_type =='bottom') {
rgns <- rgns_lo
plt_title <- 'Smallest Weekly Output of Avocados'
} else {
rgns <- cado %>% filter(!region %in% c(rgns_hi, rgns_lo)) %>%
pull(region) %>% unique() %>% sample(2)
plt_title <- 'Randomly Selected Regions'
}
avocados %>%
filter(region %in% rgns) %>%
ggplot() +
geom_line(aes(x = Date, y = `Total Volume`,
color = type, linetype = region),
size = 1.5, alpha = .7) +
scale_y_continuous(labels = scales::number_format(big.mark = ','),                                breaks = scales::pretty_breaks(n = 7)) +
scale_x_date(breaks = scales::pretty_breaks(n = 25)) +
labs(title = plt_title,
x = "", y = "Average Price") +
theme(axis.text.x = element_text(angle = 290, hjust = 0, vjust = 0, size = 18),
text = element_text(size = 24)) +
facet_grid(type~., scales = 'free_y')-> gg
return(gg)
}
plottr2(2017, 'top') / plottr2(2017, 'bottom') / plottr2(2017, 'random')
plottr2 <- function(year, sel_type = c('top', 'bottom', 'random')) {
avocados %>%
filter(year == year) %>%
group_by(region) %>%
summarise(MeanPrice = mean(AveragePrice)) %>%
ungroup() -> cado
rgns_hi <- cado %>% top_n( 2, MeanPrice) %>% pull(region)
rgns_lo <- cado %>% top_n(-2, MeanPrice) %>% pull(region)
if (sel_type == 'top'){
rgns <- rgns_hi
plt_title <- 'Largest Weekly Output of Avocados'
} else if (sel_type =='bottom') {
rgns <- rgns_lo
plt_title <- 'Smallest Weekly Output of Avocados'
} else {
rgns <- cado %>% filter(!region %in% c(rgns_hi, rgns_lo)) %>%
pull(region) %>% unique() %>% sample(2)
plt_title <- 'Randomly Selected Regions'
}
avocados %>%
filter(region %in% rgns) %>%
ggplot() +
geom_line(aes(x = Date, y = `Total Volume`,
color = type, linetype = region),
size = 1.5, alpha = .7) +
scale_y_continuous(labels = scales::number_format(big.mark = ','),                                breaks = scales::pretty_breaks(n = 7)) +
scale_x_date(breaks = scales::pretty_breaks(n = 25)) +
labs(title = plt_title,
x = "", y = "Average Price") +
theme(axis.text.x = element_text(angle = 290, hjust = 0, vjust = 0, size = 18),
text = element_text(size = 24)) +
facet_grid(type~., scales = 'free_y')-> gg
return(gg)
}
plottr2(2017, 'top') / plottr2(2017, 'bottom') / plottr2(2017, 'random')
set.seed(31)
plottr <- function(year, sel_type = c('top', 'bottom', 'random')) {
avocados %>%
filter(year == year) %>%
group_by(region) %>%
summarise(MeanPrice = mean(AveragePrice)) %>%
ungroup() -> cado
rgns_hi <- cado %>% top_n( 2, MeanPrice) %>% pull(region)
rgns_lo <- cado %>% top_n(-2, MeanPrice) %>% pull(region)
if (sel_type == 'top'){
rgns <- rgns_hi
plt_title <- 'Most Expensive Avocados'
} else if (sel_type =='bottom') {
rgns <- rgns_lo
plt_title <- 'Least Expensive Avocados'
} else {
rgns <- cado %>% filter(!region %in% c(rgns_hi, rgns_lo)) %>%
pull(region) %>% unique() %>% sample(2)
plt_title <- 'Randomly Selected Regions'
}
avocados %>%
filter(region %in% rgns) %>%
ggplot() +
geom_line(aes(x = Date, y = AveragePrice,
color = type, linetype = region),
size = 1.5, alpha = .7) +
scale_y_continuous(labels = scales::dollar_format(),
breaks = scales::pretty_breaks(n = 7)) +
scale_x_date(breaks = scales::pretty_breaks(n = 25)) +
labs(title = plt_title,
x = "", y = "Average Price") +
theme(axis.text.x = element_text(angle = 290, hjust = 0, vjust = 0, size = 18),
text = element_text(size = 24)) -> gg
return(gg)
}
plottr(2017, 'top') / plottr(2017, 'bottom') / plottr(2017, 'random')
plottr2 <- function(year, sel_type = c('top', 'bottom', 'random')) {
avocados %>%
filter(year == year) %>%
group_by(region) %>%
summarise(MeanPrice = mean(AveragePrice)) %>%
ungroup() -> cado
rgns_hi <- cado %>% top_n( 2, MeanPrice) %>% pull(region)
rgns_lo <- cado %>% top_n(-2, MeanPrice) %>% pull(region)
if (sel_type == 'top'){
rgns <- rgns_hi
plt_title <- 'Largest Weekly Output of Avocados'
} else if (sel_type =='bottom') {
rgns <- rgns_lo
plt_title <- 'Smallest Weekly Output of Avocados'
} else {
rgns <- cado %>% filter(!region %in% c(rgns_hi, rgns_lo)) %>%
pull(region) %>% unique() %>% sample(2)
plt_title <- 'Randomly Selected Regions'
}
avocados %>%
filter(region %in% rgns) %>%
ggplot() +
geom_line(aes(x = Date, y = `Total Volume`,
color = type, linetype = region),
size = 1.5, alpha = .7) +
scale_y_continuous(labels = scales::number_format(big.mark = ','),                                breaks = scales::pretty_breaks(n = 7)) +
scale_x_date(breaks = scales::pretty_breaks(n = 25)) +
labs(title = plt_title,
x = "", y = "Average Price") +
theme(axis.text.x = element_text(angle = 290, hjust = 0, vjust = 0, size = 18),
text = element_text(size = 24)) +
facet_grid(type~., scales = 'free_y')-> gg
return(gg)
}
plottr2(2017, 'top') / plottr2(2017, 'bottom') / plottr2(2017, 'random')
install.packages('plotly')
library(tidyverse)
library(rvest)
library(patchwork)
library(feasts)
library(fable)
library(tsibble)
library(e1071)
library(plotly)
theme_set(theme_light())
x <- rnorm(10)
y <- (x * 10) + runif(10)
plot(y ~ x)
x <- rnorm(10)
y <- (x * 10) + runif(10, -10, 10)
plot(y ~ x)
x <- rnorm(10)
y <- (x * 10) + runif(10, -10, 10)
plot(y ~ x); lines(lm(y ~ x))
x <- rnorm(10)
y <- (x * 10) + runif(10, -10, 10)
plot(y ~ x); lines(lm(y ~ x)$fitted)
x <- rnorm(10)
y <- (x * 10) + runif(10, -10, 10)
plot(y ~ x); lines(lm(y ~ x)$fitted, x)
x <- rnorm(10)
y <- (x * 10) + runif(10, -10, 10)
plot(y ~ x); lines(x, lm(y ~ x)$fitted)
plot(rnorm(1000), 'l')
plot(rnorm(1000))
plot(sort(rnorm(1000)))
plot(dnorm(1000))
x <- seq(0, 1, 0.0001)
plot(dnorm(x))
plot(pnorm(x))
plot(qnorm(x))
x <- seq(3, 3, 0.0001)
plot(dnomr(x))
plot(dnorm(x))
x
x <- seq(-3, 3, 0.0001)
plot(dnorm(x))
plot(dnorm(x));curve(dunif())
plot(dnorm(x));curve(dunif(x))
plot(dnorm(x));curve(dunif(x), add = T)
plot(x, dnorm(x));curve(dunif(x), add = T)
plot(x, dnorm(x));curve(dunif(x, -3 , 3), add = T)
plot(x, dnorm(x));curve(dunif(x, 2 , 2), add = T)
plot(x, dnorm(x));curve(dunif(x, -2 , 2), add = T)
plot(x, dnorm(x), type = 'l');curve(dunif(x, -2 , 2), add = T)
plot(x, dnorm(x), type = 'l', col = 'blue', size = 1);curve(dunif(x, -2 , 2), add = T)
plot(x, dnorm(x), type = 'l', col = 'blue');curve(dunif(x, -2 , 2), add = T)
plot(x, dnorm(x), type = 'l', col = 'blue');curve(dunif(x, -2 , 2), add = T, col = 'red')
xx <- numeric()
for (i in 1:1000) {
k <- rpois(2, 1)
xx[i] <- sum(k)
}
hist(xx, col="gray", border="white", freq = F)
curve(dnorm(x, mean = 2, sd = sqrt(2)), add = T)
points(dpois(0:8, lambda = 2), add = T)
hist(k, col="gray", border="white")
library(faraway)
library(tidyverse)
library(patchwork)
library(MASS)
theme_set(theme_bw())
library(faraway)
library(tidyverse)
library(patchwork)
library(MASS)
theme_set(theme_bw())
data("salmonella")
?samonella
?salmonella
data("salmonella")
# Fitting first model. Transforming Dose.
summary(salmonella.lm <- lm(colonies ~ log(dose + 1), salmonella))
fit1 <- ggplot() +
geom_point(aes(x = salmonella.lm$model[,2], y = salmonella.lm$model[,1])) +
geom_line(aes(x = salmonella.lm$model[,2], y = salmonella.lm$fitted.values)) +
labs(title = 'Salmonella Fit', subtitle = c(salmonella.lm$call),
x = 'Quinoline Dose (Transformed)', y = '# of Colonies')
# Fitting a second model for comparison, treating Dose as factor, and still transforming it.
summary(salmonella.lm2 <- lm(colonies ~ as.factor(round(log(dose + 1), 4)), salmonella))
fit2 <- ggplot() +
geom_point(aes(x = salmonella.lm2$model[,2], y = salmonella.lm2$model[,1])) +
geom_point(aes(x = salmonella.lm2$model[,2], y = salmonella.lm2$fitted.values), col = 'red', shape = 3, size = 3) +
labs(title = 'Salmonella Fit, Dose Treated as Factor', subtitle = c(salmonella.lm2$call),
x = 'Quinoline Dose (Transformed)', y = '# of Colonies')
# F-Test between the two models
anova(salmonella.lm, salmonella.lm2)
fit1 | fit2
# F-Test between the two models
anova(salmonella.lm, salmonella.lm2)
KnitPost <- function(input, outfile, base.url="/") {
# this function is a modified version of an example here:
# https://github.com/ouzor/ouzor.github.com/blob/master/_knitposts.R
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0("addons", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "testing")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
for (infile in list.files("blog/_posts/drafts/RMarkDowns", pattern="*.Rmd", full.names=TRUE)) {
outfile = paste0("blog/_posts/", sub(".Rmd$", ".md", basename(infile)))
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile)
}
}
infile
for (infile in list.files("~/blog/_posts/drafts/RMarkDowns", pattern="*.Rmd", full.names=TRUE)) {
outfile = paste0("blog/_posts/", sub(".Rmd$", ".md", basename(infile)))
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile)
}
}
infile
list.files("~/blog/_posts/drafts/RMarkDowns", pattern="*.Rmd", full.names=TRUE)
getwd()
list.files("~/blog/_posts/drafts/RMarkDowns/", pattern="*.Rmd", full.names=TRUE)
setwd("~/Projects/Computer Science Projects/Data Scientist Portfolio/9Olive.github.io")
KnitPost <- function(input, outfile, base.url="/") {
# this function is a modified version of an example here:
# https://github.com/ouzor/ouzor.github.com/blob/master/_knitposts.R
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0("addons", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "testing")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
for (infile in list.files("~/blog/_posts/drafts/RMarkDowns/", pattern="*.Rmd", full.names=TRUE)) {
outfile = paste0("~/blog/_posts/drafts/Staging/", sub(".Rmd$", ".md", basename(infile)))
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile)
}
}
infile
list.files("~/blog/_posts/drafts/RMarkDowns/", pattern="*.Rmd", full.names=TRUE)
getwd
getwd()
Sys.Date()
infile in list.files("blog/_posts/drafts/RMarkDowns", pattern="*.Rmd", full.names=TRUE)
list.files("blog/_posts/drafts/RMarkDowns", pattern="*.Rmd", full.names=TRUE)
options$set(fig.width = 16, fig.height = 9)
globalenv(options$set(fig.width = 16, fig.height = 9))
knitr::options$set(fig.width = 16, fig.height = 9)
opts_chunk$set(fig.width = 16, fig.height = 9)
opts_chunk$set(fig.width = 16, fig.height = 9)
globalenv(opts_chunk$set(fig.width = 16, fig.height = 9))
library(faraway)
library(tidyverse)
library(patchwork)
library(MASS)
library(knitr)
theme_set(theme_bw())
opts_chunk$set(fig.width = 16, fig.height = 9)
# Patchwork nomenclature
fit1 | fit2
library(tidymodels)
library(baguette)
install.packages(c('tidymodels', 'baguette'))
library(tidymodels)
library(tidymodels)
1:10 %>% mean()
library(baguette)
bag_tree() %>%
set_engine('rpart')
bag_tree() %>%
set_engine(engine = 'rpart')
(bag_cars <-
bag_tree() %>%
set_engine('rpart', times = 25) %>%
set_mode('regression') %>%
fit(mpg ~ ., data = mtcars))
mtcars.lm <- lm(mpg ~ ., data = mtcars)
summary(mtcars.lm)
library(poissonreg)
install.packages('poissonreg')
library(poissonreg)
poisson_reg() %>%
set_engine('glm') %>%
fit(count ~ (.)^2, data = seniors) -> log_lin_mod
(poisson_reg() %>%
set_engine('glm') %>%
fit(count ~ (.)^2, data = seniors) -> log_lin_mod)
install.packages('plsmod')
library(plsmod)
install.packages('plsmod')
install.packages('mixOmics')
log_lin_mod$elapsed
log_lin_mod$spec
M <- matrix(c((1/3), (1/3), 0, 0, 0, (1/3)), byrow = T)
M
M <- matrix(c((1/3), (1/3), 0, 0, 0, (1/3)), ncol = 3)
M
M <- matrix(c((1/3), (1/3), 0, 0, 0, (1/3)), ncol = 3, byrow = T)
M
solve(M)
source('~/.active-rstudio-document', echo=TRUE)
M^-1
t(M) %*% M
M <- sqrt(M)
t(M) %*% M
M
t(M)
MTM <- t(M) %*% M
eigen(MTM, symmetric = T)
